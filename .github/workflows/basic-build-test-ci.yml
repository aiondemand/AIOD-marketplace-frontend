name: CI/CD MyLibrary Marketplace Frontend build and test

# This workflow will build docker image and run tests inside the container.
# This workflow is only executed if there is pull request with change in pyproject.toml dependencies,
# or in Dockerfile, or in docker workflow.

on:
  pull_request:
    branches:
      - main # executed on every pull request to main
    paths:
      - '.github/workflows/**'
      - 'Dockerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'
  push:
    branches:
      - main

  release:
    types: [published]

  # allows to manually start a workflow run from the GitHub UI or using the GitHub API.
  workflow_dispatch:
    inputs:
      push-image:
        description: "Push image to docker hub"
        required: false
        type: boolean
        default: false
      push-description:
        description: "Update docker hub description"
        required: false
        type: boolean
        default: false
      tag:
        description: "Tag for the docker image"
        required: false
        default: "workflow-dispatch"


jobs:

  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (Dev)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/marketplace/dev/Dockerfile
          tags:  aiod/mylibrary-frontend:develop
          outputs: type=docker,dest=/tmp/aiod_my_library_dev.tar
          cache-from: type=gha
          cache-to: type=gha,mode=min
      
      - name: Build and push Docker image (Prod)
        uses: docker/build-push-action@v5
        with:
         context: .
         file: ./docker/marketplace/prod/Dockerfile
         tags:  aiod/mylibrary-frontend:latest
         outputs: type=docker,dest=/tmp/aiod_my_library_prod.tar
         cache-from: type=gha
         cache-to: type=gha,mode=min


      # We store the image as an artifact, so it can be used by the `test` step
      # and inspected manually if needed (download it through Github Actions UI)
      - name: Store Image dev
        uses: actions/upload-artifact@v4
        with:
          name: aiod_my_library_dev
          path: /tmp/aiod_my_library_dev.tar
      
      - name: Store Image prod
        uses: actions/upload-artifact@v4
        with:
          name: aiod_my_library_prod
          path: /tmp/aiod_my_library_prod.tar

  unit-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: 10

      - name: Install dependenes
        run: npm install

      - name: Run test
        run: npm test
  
  
  test-inside-docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built Docker image Dev
        uses: actions/download-artifact@v4
        with:
          name: aiod_my_library_dev
          path: /tmp/aiod_my_library_dev.tar
      
      - name: Load image Dev
        run: docker load --input aiod_my_library_dev

      - name: Run tests inside Docker container
        run: |
          docker run --rm aiod/mylibrary-frontend:develop npm test
    
      - name: Download built Docker image Prod
        uses: actions/download-artifact@v4
        with:
          name: aiod_my_library_prod
          path: /tmp/aiod_my_library_prod.tar

      - name: Load image Prod
        run: docker load --input aiod_my_library_prod

      - name: Run tests inside Docker container
        run: |
          docker run --rm aiod/mylibrary-frontend:latest npm test
    

  publish:
    needs: [test-inside-docker]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Set Develop Tag
        if: github.ref == 'refs/heads/develop'
        run: echo "IMAGE_TAGS=aiod/mylibrary-frontend:develop" >> "$GITHUB_ENV"
      - name: Set Release Tag
        if: github.event_name == 'release'
        run: echo "IMAGE_TAGS=aiod/mylibrary-frontend:latest,aiod/mylibrary-frontend:${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
      - name: Set Dispatch Tag
        if: github.event_name == 'workflow_dispatch'
        run: echo "IMAGE_TAGS=aiod/mylibrary-frontend:${{ inputs.tag }}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}
      - name: Echo tags
        run: echo $IMAGE_TAGS
      - name: Build
        if: (github.event_name != 'workflow_dispatch') || inputs.push-image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ env.IMAGE_TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
      - name: Update repository description
        if: (github.event_name == 'release') || inputs.push-description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: aiod/mylibrary-frontend
          readme-filepath: ./docker-description.md
          short-description: "My library frontend for AI on Demand."

      - name: Verify pushed image (optional)
        run: docker pull ${{ env.IMAGE_TAGS }}
